on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      checks: write
      pull-requests: write
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive

      - name: Run ESLint
        continue-on-error: true
        run: |
          yarn lint --max-warnings=0 --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif

      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          wait-for-processing: true

      - name: Run generate and check if something changed
        run: yarn generate && git diff --exit-code

      - name: Run type checks
        run: yarn typecheck

      - name: Prepare for tests
        id: prepare
        run: |
          yarn dev:db
          
          # wait for the database to be ready
          npx wait-on tcp:5432
          
          # initialize the database with prisma.io
          yarn prisma db push --force-reset --accept-data-loss
          
          # redis
          yarn dev:redis
          
          # wait for redis to be ready
          npx wait-on tcp:6379
          
          yarn dev &

      - name: Wait for the app to be ready
        run: |
          npx wait-on http://localhost:3232

      - name: Run tests
        run: yarn test

  build-linux-container:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    strategy:
      matrix:
        # platform: [linux/amd64, linux/arm64]
        platform: [linux/amd64]
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - uses: actions/checkout@v4

      - name: Log in into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        if: runner.os != 'Linux'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=true
          images: |
            ghcr.io/${{ github.repository }}:${{ env.PLATFORM_PAIR }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=ghcr.io/${{ github.repository }}:${{ env.PLATFORM_PAIR }},push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.docker_build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: 'error'
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [build-linux-container]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: 'digests-*'
          merge-multiple: 'true'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=true
          images: |
            ghcr.io/${{ github.repository }}:${{ env.PLATFORM_PAIR }}

      - name: Merge digests
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ github.repository }}@sha256:%s ' *)
