/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Search for events */
        get: {
            parameters: {
                query: {
                    q: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"] & {
                            data: {
                                events: components["schemas"]["Event"][];
                            };
                        };
                    };
                };
                /** @description Missing query */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SuccessResponse: {
            /**
             * @example true
             * @enum {boolean}
             */
            success: true;
        };
        ErrorResponse: {
            /**
             * @example false
             * @enum {boolean}
             */
            success: false;
            message: string;
        };
        Persons: string[];
        Tags: string[];
        Recording: {
            /** @example 0 */
            size: number | null;
            /** @example 0 */
            length: number | null;
            /** @example video/mp4 */
            mime_type: string;
            /** @example eng */
            language: string;
            /** @example recording.mp4 */
            filename: string;
            /** @example false */
            high_quality: boolean;
            /** @example 0 */
            width: number | null;
            /** @example 0 */
            height: number | null;
            /**
             * Format: date-time
             * @example 2022-01-01T00:00:00Z
             */
            updated_at: string;
            /** @example https://cdn.example.com/recording.mp4 */
            recording_url: string;
            /** @example https://api.example.com */
            url: string;
            /** @example https://example.com/event */
            event_url: string;
            /** @example https://conference.example.com */
            conference_url: string;
        };
        Recordings: components["schemas"]["Recording"][];
        Event: {
            /** @example c7b3b1b0-7b3b-4b3b-8b3b-3b3b3b3b3b3b */
            guid: string;
            /** @example Event title */
            title: string;
            /** @example Event subtitle */
            subtitle: string;
            /** @example event-slug */
            slug: string;
            /** @example Event description */
            description: string;
            /** @example https://example.com */
            link: string;
            /** @example eng */
            original_language: string;
            persons: components["schemas"]["Persons"];
            tags: components["schemas"]["Tags"];
            /** @example 0 */
            view_count: number;
            /** @example false */
            promoted: boolean;
            /**
             * Format: date-time
             * @example 2022-01-01T00:00:00Z
             */
            date: string;
            /**
             * Format: date-time
             * @example 2022-01-01T00:00:00Z
             */
            release_date: string;
            /**
             * Format: date-time
             * @example 2022-01-01T00:00:00Z
             */
            updated_at: string;
            /** @example 0 */
            length: number;
            /** @example 0 */
            duration: number;
            /** @example https://example.com/thumb.jpg */
            thumb_url: string;
            /** @example https://example.com/poster.jpg */
            poster_url: string;
            /** @example https://example.com/timeline.jpg */
            timeline_url: string;
            /** @example https://example.com/thumbnails.vtt */
            thumbnails_url: string;
            /** @example https://example.com */
            frontend_link: string;
            /** @example https://api.example.com */
            url: string;
            /** @example Conference title */
            conference_title: string;
            /** @example https://conference.example.com */
            conference_url: string;
            recordings: components["schemas"]["Recordings"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
